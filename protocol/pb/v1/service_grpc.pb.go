// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/v1/service.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleService_RetrieveSampleData_FullMethodName = "/pb.SampleService/RetrieveSampleData"
	SampleService_StreamDownload_FullMethodName     = "/pb.SampleService/StreamDownload"
	SampleService_StreamDownloadHttp_FullMethodName = "/pb.SampleService/StreamDownloadHttp"
	SampleService_StreamUploadHttp_FullMethodName   = "/pb.SampleService/StreamUploadHttp"
)

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleServiceClient interface {
	RetrieveSampleData(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error)
	StreamDownload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SampleService_StreamDownloadClient, error)
	StreamDownloadHttp(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SampleService_StreamDownloadHttpClient, error)
	StreamUploadHttp(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamUploadHttpClient, error)
}

type sampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleServiceClient(cc grpc.ClientConnInterface) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) RetrieveSampleData(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, SampleService_RetrieveSampleData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) StreamDownload(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SampleService_StreamDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[0], SampleService_StreamDownload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_StreamDownloadClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type sampleServiceStreamDownloadClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamDownloadClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) StreamDownloadHttp(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SampleService_StreamDownloadHttpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[1], SampleService_StreamDownloadHttp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamDownloadHttpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SampleService_StreamDownloadHttpClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type sampleServiceStreamDownloadHttpClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamDownloadHttpClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sampleServiceClient) StreamUploadHttp(ctx context.Context, opts ...grpc.CallOption) (SampleService_StreamUploadHttpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SampleService_ServiceDesc.Streams[2], SampleService_StreamUploadHttp_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleServiceStreamUploadHttpClient{stream}
	return x, nil
}

type SampleService_StreamUploadHttpClient interface {
	Send(*httpbody.HttpBody) error
	CloseAndRecv() (*SampleResponse, error)
	grpc.ClientStream
}

type sampleServiceStreamUploadHttpClient struct {
	grpc.ClientStream
}

func (x *sampleServiceStreamUploadHttpClient) Send(m *httpbody.HttpBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleServiceStreamUploadHttpClient) CloseAndRecv() (*SampleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SampleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleServiceServer is the server API for SampleService service.
// All implementations should embed UnimplementedSampleServiceServer
// for forward compatibility
type SampleServiceServer interface {
	RetrieveSampleData(context.Context, *SampleRequest) (*SampleResponse, error)
	StreamDownload(*StreamRequest, SampleService_StreamDownloadServer) error
	StreamDownloadHttp(*StreamRequest, SampleService_StreamDownloadHttpServer) error
	StreamUploadHttp(SampleService_StreamUploadHttpServer) error
}

// UnimplementedSampleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSampleServiceServer struct {
}

func (UnimplementedSampleServiceServer) RetrieveSampleData(context.Context, *SampleRequest) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSampleData not implemented")
}
func (UnimplementedSampleServiceServer) StreamDownload(*StreamRequest, SampleService_StreamDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDownload not implemented")
}
func (UnimplementedSampleServiceServer) StreamDownloadHttp(*StreamRequest, SampleService_StreamDownloadHttpServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDownloadHttp not implemented")
}
func (UnimplementedSampleServiceServer) StreamUploadHttp(SampleService_StreamUploadHttpServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUploadHttp not implemented")
}

// UnsafeSampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleServiceServer will
// result in compilation errors.
type UnsafeSampleServiceServer interface {
	mustEmbedUnimplementedSampleServiceServer()
}

func RegisterSampleServiceServer(s grpc.ServiceRegistrar, srv SampleServiceServer) {
	s.RegisterService(&SampleService_ServiceDesc, srv)
}

func _SampleService_RetrieveSampleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).RetrieveSampleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleService_RetrieveSampleData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).RetrieveSampleData(ctx, req.(*SampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_StreamDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).StreamDownload(m, &sampleServiceStreamDownloadServer{stream})
}

type SampleService_StreamDownloadServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type sampleServiceStreamDownloadServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamDownloadServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SampleService_StreamDownloadHttp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SampleServiceServer).StreamDownloadHttp(m, &sampleServiceStreamDownloadHttpServer{stream})
}

type SampleService_StreamDownloadHttpServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type sampleServiceStreamDownloadHttpServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamDownloadHttpServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _SampleService_StreamUploadHttp_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServiceServer).StreamUploadHttp(&sampleServiceStreamUploadHttpServer{stream})
}

type SampleService_StreamUploadHttpServer interface {
	SendAndClose(*SampleResponse) error
	Recv() (*httpbody.HttpBody, error)
	grpc.ServerStream
}

type sampleServiceStreamUploadHttpServer struct {
	grpc.ServerStream
}

func (x *sampleServiceStreamUploadHttpServer) SendAndClose(m *SampleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleServiceStreamUploadHttpServer) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleService_ServiceDesc is the grpc.ServiceDesc for SampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSampleData",
			Handler:    _SampleService_RetrieveSampleData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDownload",
			Handler:       _SampleService_StreamDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDownloadHttp",
			Handler:       _SampleService_StreamDownloadHttp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamUploadHttp",
			Handler:       _SampleService_StreamUploadHttp_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/v1/service.proto",
}
